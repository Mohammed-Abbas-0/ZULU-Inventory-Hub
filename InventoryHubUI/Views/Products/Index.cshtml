@model IEnumerable<InventoryHubUI.DTO.ProductViewModel>

@{
    ViewData["Title"] = "Products";
    var currentPage = ViewData["CurrentPage"] != null ? (int)ViewData["CurrentPage"] : 1;
    var pageSize = ViewData["PageSize"] != null ? (int)ViewData["PageSize"] : 10;
    var totalItems = ViewData["TotalItems"] != null ? (int)ViewData["TotalItems"] : 0;


    var totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    var hasNextPage = currentPage < totalPages;
    var hasPreviousPage = currentPage > 1;
    int loop = 1;
}
<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    /* تنسيق الخلايا في الجدول */
    th, td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    /* تنسيق رأس الجدول */
    th {
        background-color: #f2f2f2;
        text-align: left;
    }

    tr {
        background-color: #ffffff;
    }

        tr:hover {
            background-color: #f9f9f9;
        }

    td {
        text-align: center;
    }

    .create-product {
        position: fixed;
        right: 10px;
    }

    .form-select {
        border-radius: 5px;
        width: 88px;
        height: 34px;
        font-size: 17px;
        text-align: center;
        margin: 0 5px;
    }
    .page-item.active .page-link {
        color: #fff;
        background-color: #438a7a;
        border-color: #438a7a;
    }
    .page-item {
    }
       
</style>
<div style="display:flex;align-items:center;padding:10px 15px;">
    <h2 style="flex:1">Products</h2>
    <a asp-action="CreateProduct" class="btn background-design create-product" >
        <i class="bi bi-plus-circle"></i>
        Create a new product
    </a>
</div>
    <div class="row" style="background-color: #ffffff; margin: 0; padding: 15px 0; border-radius: 5px;">
        <div class="col-md-4">
            <label>
                Show
                <select id="productListTable_length" class="form-select">
                    <option value="10" selected>10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </label>
        </div>
        <div class="col-md-6"></div>
        <div class="col-md-2">
            <input type="text" id="searchInput" class="form-control" placeholder="Search...">
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Sr.No</th>
                <th class="d-none">Product ID</th>
                <th>Product Name</th>
                <th>Product Image</th>
                <th>Code</th>
                <th>Price</th>
                <th>Stock Quantity</th>
                <th>@*Category*@</th>
                <th>Store</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model)
            {
                <tr style="line-height:4">
                    <td>@loop</td>
                    <td class="d-none">@product.ProductId</td>
                    <td>
                        <a target="_blank" style="text-decoration:none" asp-action="EditProduct" asp-route-id="@product.ProductId">@product.Name</a>
                    </td>
                    <td>
                        <div style=" width: 60px; height: 60px; overflow: hidden; border-radius: 50%;">
                            <img style="width: 100%; height: 100%;" src="@product.ImagePath" alt="product Image" />

                        </div>
                    </td>
                    <td>@product.Code</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.StockQuantity?.ToString()</td>
                    <td>@*@product.Category.Name*@</td>
                    <td>@product.Store?.StoreName</td>
                </tr>
                loop++;
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(hasPreviousPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = 1, pageSize })" tabindex="-1">First</a>
            </li>
            <li class="page-item @(hasPreviousPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = currentPage - 1, pageSize })" tabindex="-1">Previous</a>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, pageSize })">@i</a>
                </li>

            }

            <li class="page-item @(hasNextPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = currentPage + 1, pageSize })">Next</a>
            </li>
            <li class="page-item @(hasNextPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = totalPages, pageSize })">Last</a>
            </li>
        </ul>
    </nav>


@section Scripts {


    <script>

        $(document).ready(function () {
           
            GetSelectValueFromURL();
            $("#productListTable_length").on("change", function () {
                debugger
                // الحصول على قيمة الحجم الجديد من القائمة المنسدلة
                var pageSize = $(this).val();
                //SetSelectValueToLocalStorage(pageSize);
                

                var fullUrl = window.location.href;

                // إنشاء كائن URL لتحليل الـ URL
                var url = new URL(fullUrl);

                // الحصول على الجزء الأساسي من الـ URL بدون معلمات الاستعلام
                var baseUrl = url.origin + url.pathname;

                // إعادة توجيه المستخدم إلى URL الجديد
                // https://localhost:44375/Products?pageNumber=1&pageSize=20
                window.location.href = baseUrl + "?pageNumber=1&pageSize=" + pageSize;
            });
        });

        
        function GetSelectValueFromURL() {
            
            // Create a new URL object
            const url = new URL(window.location.href);

            const searchParams = url.searchParams; // URLSearchParams object containing query parameters

            // Access individual query parameters
            const pageSize = searchParams.get('pageSize'); // '20'
            if (pageSize)
                $("#productListTable_length").val(pageSize);
            
        }

        // Search Table
            $('#searchInput').on('keyup', function () {
                var value = $(this).val().toLowerCase();
                $('table tbody tr').filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
        
    </script>
}
